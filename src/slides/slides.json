{
  "10": {
    "steps": 0,
    "script": ["Hi, I'm Chris, a senior front-end engineer at Unmade."],
    "bullets": ["Chris, Senior FEE Unmade"]
  },
  "12": {
    "steps": 0,
    "script": [
      "At Unmade, we help fashion brands produce customised garments using the same manufacturing processes as their mass-produced ranges. I've been there for just over three years.  When I started, we were focussed entirely on knitwear and developing the software required to automate industrial knitting machines."
    ],
    "bullets": [
      "At unmade, help fashion brands customise using same process as mass \n\n three years \n\ndeveloping the software required to automate industrial knitting machines"
    ]
  },
  "13": {
    "steps": 0,
    "script": [
      "A couple of years ago we were approached by Rapha, the cyclewear brand, who wanted to leverage our technology to build a customisation platform to allow cycling clubs to design and purchase custom kit manufactured to the same high standard as all Rapha's other offerings."
    ],
    "bullets": ["intro Rapha, intro project"]
  },
  "14": {
    "steps": 0,
    "script": [
      "This is an example of the kind of output file that we generate.  This is what we call a layplan, it's a print-ready file containing all the user's customisation choices applied to a template. When this is printed, it can be cut out, joined together and shipped out to the customer.\n\nI'd like to talk to you about some of the interesting challenges we've faced during this project and some of the features of SVG that we've been able to take advantage of in order to overcome these challenges\n\nSome of this may be features you're already familiar with, some of it maybe not, but hopefully you'll come away with some new ideas about how you can bend SVGs to do more than you may have thought before."
    ],
    "bullets": [
      "Intro layplan, how it works\n\nintro the talk, some features and challenges, maybe you know them maybe you dont but you should get something out of it"
    ]
  },
  "15": {
    "steps": 0,
    "script": [
      "In this talk I'm going to cover four main areas: \n\nHow we chose SVG as our technical solution, \n\nPatterns and Logos, and how we apply them to our custom garments \n\nand Sustainability, how we are able to use this technology to reduce the environmental impact of the fashion industry.  \n\nAnd how I was able to change the title of this talk from it's vastly less clickbaity working title."
    ],
    "bullets": ["Intro each part of the talk, intro the working title"]
  },
  "16": {
    "steps": 0,
    "script": [
      "Understanding the trigonometry of rotating vectors when arbitrary rotational values are applied"
    ],
    "bullets": ["read it"]
  },
  "20": {
    "steps": 0,
    "script": [
      "SVG stands for Scalable Vector Graphics, it's an open format that allows you to draw pretty complicated images as code.\n\nWe determined that SVG was the ideal format for this project because:"
    ],
    "bullets": ["what are SVGs, why we chose them"]
  },
  "21": {
    "steps": 0,
    "script": [
      "SVG is vector based, it's what the V stands for.  This means that our output file can be printed in super high-resolution but keep a small filesize, small enough to run on devices without loads of memory to spare.\n\nSVG support is baked in to existing software like Illustrator and Corel Draw.  The blank layplans we take as an input can therefore be drawn by the draftsmen in the factory - the experts in this field, without any additional training on how to write SVG code\n\nSVG is very widely supported by browsers, and methods to manipulate SVG, changing attributes or creating and removing elements are readily available to javascript without any additional libraries.\n\nSVG supports CMYK and RGB colour spaces.  This means we can present graphics to the user on screen with RGB colours, then swap them out for CMYK colours before we print.  As long as we use accurate colour data, the finished, printed item will look the same as they did on screen.  This means we can print using Pantone colours, for which printed references already exist, so kit designers can get really accurate with their colours."
    ],
    "bullets": ["on screen, mention slides"]
  },
  "30": {
    "steps": 0,
    "script": [
      "The traditional process for designing a custom team kit involves a fair bit of back and forth between the customer and a designer.\n\nOften this starts with hand-drawn sketches and rounds of customer revisions until eventually the customer is happy.  This is a slow process, I'm sure we all know it's difficult to get an idea out of someone else's head.\n\nFrom there the design is sent to the factory, where a skilled draftsman will adapt the it into a layplan template, which can then be printed, cut and assembled into a garment. Then there may be one or more samples made, to ensure the customer is happy with the final product, before the full production run is made."
    ],
    "bullets": [
      "Trad process - back and forth until happy, then to factory then samples then manufacture"
    ]
  },
  "40": {
    "steps": 0,
    "script": [
      "The platform we've developed automates much of this process, and moves a lot of the responsibility onto the customer.\n\nWe take a blank layplan as an input, apply various choices made by the user and output a file that's ready to print.\n\nThere's no need for rounds of feedback or physical samples, as the customer is able to see on screen a realistic render of the product they'll recieve in the post."
    ],
    "bullets": [
      "We move the responsibility onto the customer\n\nno back and forth\n\nno samples"
    ]
  },
  "41": {
    "steps": 0,
    "script": [
      "There are a couple of details required here that are easy to overlook, but are crucial to ensure our online customisation experience is as good as doing it by hand.  Users can choose from a list of graphic patterns that can be applied to all or part of the garment, "
    ],
    "bullets": [
      "Details not to be overlooked to compete with by-hand: \n\nPatterns can be applied"
    ]
  },
  "42": {
    "steps": 0,
    "script": [
      "and the same goes for logos - if you're creating your team kit you want your team logo on it, as well as any sponsors you might have. These two features posed the majority of development challenges we faced."
    ],
    "bullets": [
      "logos too - team logos and sponsors\n\nthese two were challenges for us"
    ]
  },
  "50": {
    "steps": 0,
    "script": [
      "Part of the customisation process allows the customer to set a pattern as the background to all or part of their garment, and then transform it by scaling and rotating."
    ],
    "bullets": ["patterns - appplied wherever and transformed"]
  },
  "70": {
    "steps": 5,
    "script": [
      "SVG has a <pattern> element - this seemed like the obvious solution.",
      "SVG patterns require you to draw a single tile, of any size, containing any other SVG elements you like.",
      "These tiles are then repeated infinitely, much like CSS image backgrounds.",
      "I liked this because I'm really familiar with CSS backgrounds thanks to the days of",
      "pain-stakingly restyling my myspace page. However, what we quickly discovered was that SVG Patterns have a crucial difference to CSS backgrounds."
    ],
    "bullets": [
      "pattern element seems obvious",
      "requires you to draw stuff into a tile",
      "repeated infinitely like css",
      "i like this",
      "cos of myspace days \n\n but SVG patterns are different"
    ]
  },
  "80": {
    "steps": 2,
    "script": [
      "When you apply a background to an element with CSS, by default the background is anchored to the top left of that element.",
      "When you move it around, the background moves with it."
    ],
    "bullets": [
      "CSS anchors the pattern to the element",
      "bg moves with the element"
    ]
  },
  "90": {
    "steps": 2,
    "script": [
      "When you define a pattern in SVG, it's anchored to the top left of the DOCUMENT.  It's repeated, hidden, across the entire document and revealed only within any elements that you apply it to.",
      "When you move the element, the background stays fixed.  This is not ideal for our use case for a couple of reasons."
    ],
    "bullets": [
      "svg anchors the pattern to the document, repeated hidden",
      "moving it keeps the bg fixed - no good for us because:"
    ]
  },
  "100": {
    "steps": 0,
    "script": [
      "Firstly, not all the panels on our layplan are oriented the same way.  They're arranged and rotated to save material.\n\nA pattern anchored to the document would not look right when applied to a rotated panel.  As you can see here, the sleeves have been rotated on the layplan and as a result the stripes are going the wrong way."
    ],
    "bullets": ["panels arranged and rotated"]
  },
  "110": {
    "steps": 0,
    "script": [
      "Secondly - in fashion, much like when you're wallpapering, there is this concept of pattern matching.\n\nSome of our panels are attached in such a way that we want the patterns to flow seamlessly across the, er, seams.\n\nWe need to be able to define a point on each panel that the pattern should be anchored to, and translated around.\n\nWe even have markers in our blank layplans that show us where the centre of a panel should be and how it's rotated on the document.\n\nSo we need to somehow be able to transform our pattern element.  We turned to the developers best friend"
    ],
    "bullets": [
      "pattern matching - pattern must be seamless. \n\nneed to transform, so we turn to"
    ]
  },
  "120": {
    "steps": 0,
    "script": [
      "And found the patternTransform attribute, which allows you to define any set of transformations to apply to your pattern"
    ],
    "bullets": ["google provides patternTransform: intro that"]
  },
  "130": {
    "steps": 0,
    "script": [
      "BUT.  We didn't want to apply the transform to the pattern element.  We want to be able to transform the pattern as it's applied to the panel, we need different transformations per-panel."
    ],
    "bullets": ["but we need per-panel transforms"]
  },
  "140": {
    "steps": 2,
    "script": [
      "So we had a crack at duplicating the patterns, one per panel, and applying transformations like that.\n\nBut this was very repetitive, and when the user starts to scale or rotate that pattern, we had to run some more calculations to determine how the user's choices affect the existing transform value and it started to get a bit out of hand. The code became hard to read, and harder to maintain",
      "It was not sustainable code, so we decided to look for a simpler path."
    ],
    "bullets": [
      "so we tried duplicating, but it got hectic",
      "not sustainable, looked elsewhere"
    ]
  },
  "150": {
    "steps": 2,
    "script": [
      "We stumbled across the fact that when you move an SVG element by applying a transform, rather than changing it's x and y position",
      "it retains the fill from its original position. \n\n Does anyone else feel like stumbling across stuff has played a huge part in getting you to this stage of your career?  Or is that just me?"
    ],
    "bullets": [
      "applying transform not x/y",
      "retains the fill from original pos"
    ]
  },
  "190": {
    "steps": 4,
    "script": [
      "SVG's co-ordinate system allows you to draw stuff that's outside of the visible area or viewbox.  In this example only the bottom right quarter would be within the viewbox, but I'm showing more for illustrative purposes.  So we figured we could",
      "draw some simple rectangles big enough to cover our panels, but centred at the document origin - anchoring the pattern to the centre of the rectangles",
      "Then we move them into place with a transformation, keeping the pattern locked at the centre",
      "And finally hide anything outside our panel using a clipping path"
    ],
    "bullets": [
      "so we",
      "draw rects centered at origin, anchoring pattern",
      "transform into place, keeping locked",
      "hide with cliping path"
    ]
  },
  "210": {
    "steps": 7,
    "script": [
      "This is cool, until the user starts to add their own transformation, at which point our rectangle is no longer the right size, and we're left with blank areas inside our panel.",
      "Dealing with this took a bit of number crunching.  I thought back to GCSE trigonometry and remembered thinking \"I'll never need this in real life\" (Damn). So I relearned enough to determine how to scale each rectangle to cover the panel when rotation is applied.",
      "We built this as a prototype to present to the wider company.  I was proposing a pretty big change in how we apply patterns, and I feel much more confident in making big changes if I've got everyone else on board before hand.  That way we all share the blame if it doesn't work. \n\n But this does work, so after this presentation, I was feeling pretty smug until",
      "Martin, one of our product managers asked if:  instead of using scaling rectangles, couldn't we just use circles?",
      "SVG Circles were a revelation.",
      "And made handling user transformations far easier",
      "Seeking feedback had provided us with a much simpler solution.  Hacking away at this problem in isolation had narrowed my focus down this one path.  Sharing the problem with the fresh eyes and minds of other team members resulted in a completely different approach."
    ],
    "bullets": [
      "cool until user transformations",
      "this needed some maths, GCSE forgot, relearned",
      "built prototype, presented for feedback",
      "got feedback",
      "why I love circles",
      "circles are great",
      "cross functional feedback, fresh eyes"
    ]
  },
  "250": {
    "steps": 3,
    "script": [
      "With rectangles, your shape's origin is the top left.  If you want the centre point, which we do,",
      "you need to calculate that.",
      "With circles, the centre of the shape is the origin, and you define it when writing the code. We were doing all this maths to translate and scale our rectangles but with circles we never need to transform. We were able to massively simplify the process and therefore the code. \n\n  This was when I realised the SVG circle element was my new favourite circular thing."
    ],
    "bullets": [
      "rectangles origin top, calculate center",
      "circle origin centre, coded, massively simplify code and process"
    ]
  },
  "260": {
    "steps": 6,
    "script": [
      "So our final process for applying patterns is:",
      "Draw a circle for each panel at 0, 0, sized to cover the entirity of the panel",
      "transform them into place, keeping the pattern locked to the centre",
      "apply the clip path",
      "then any user transforms can be applied directly to the circle - no trigonometry required.  15 year old Chris is vindicated.  On the maths thing at least.",
      "Not on some of the other questionable decisions I made in my youth"
    ],
    "bullets": [
      "so now we",
      "draw circle big enough",
      "transform",
      "clip path",
      "transform the circle, no trig"
    ]
  },
  "310": {
    "steps": 0,
    "script": [
      "So to our next problem - as well as patterns, customers can upload and apply logos to specific placements defined in the layplan."
    ],
    "bullets": ["next prob - logos, explain"]
  },
  "320": {
    "steps": 4,
    "script": [
      "Again, these placements can be rotated and, even more so with logos,",
      "pattern matching is crucial.  Getting it wrong could",
      "be",
      "embarrassing - I created this cycling team purely for this joke"
    ],
    "bullets": [
      "also user transformable",
      "pattern matching critical",
      "wrong",
      "bad"
    ]
  },
  "340": {
    "steps": 5,
    "script": [
      "Intially I thought : well we've solved all this already so lets just use <pattern> elements but manipulate them so that they're big enough to never repeat.",
      "But when we started applying user transforms,",
      "this didn't work and I realised",
      "this was madness.  The whole point of patterns is that they repeat.",
      "Trying to shoehorn a solution to a completely separate problem was not the answer."
    ],
    "bullets": [
      "already solved, right?",
      "but user transforms",
      "no",
      "not gonna work",
      "dont shoehorn"
    ]
  },
  "350": {
    "steps": 0,
    "script": [
      "We took a step back and came up with a solution using the <use> tag."
    ],
    "bullets": ["on screen"]
  },
  "360": {
    "steps": 3,
    "script": [
      "SVGs <use> tag allows you to clone an element from one place in your document to another.",
      "And importantly you can change the width and height, and apply transformations to cloned elements, so each clone can be sized and positioned differently to the original element.",
      "Our solution involved us inserting a use tag for each possible placement, positioned, sized and rotated to cover that placement. \n\n  Then when a user uploads their logo SVG, we copy the entire file to a hidden part of our document and update the href of the relevant use tag to point to the uploaded file, cloning the logo into place."
    ],
    "bullets": ["intro use", "supports transforms"]
  },
  "361": {
    "steps": 3,
    "script": [
      "This lets us use another smart feature of SVG - that you can nest SVGs inside SVGs",
      "Nested SVGs retain their own co-ordinate system, so elements all render in the correct positions - much like embedding an image, but because we've embedded the whole file",
      "We have the ability to change any attributes on the uploaded file."
    ]
  },
  "370": {
    "steps": 0,
    "script": [
      "Because nested SVGs have their own coordinate system, we're able to make an uploaded logo fit perfectly into any of our placements, regardless of what size it was drawn, by manipulating just three attributes on the nested SVG. \n\n Coordinate systems can be set with with a viewBox attribute or interpreted from the width and height, so if an uploaded logo has no viewbox we create one from it's width and height, and set the width and height to 100%. This tells the SVG to fill whatever box it's put inside - in this case that'll be the width and height we set on our use tag."
    ],
    "bullets": ["on screen"]
  },
  "380": {
    "steps": 0,
    "script": [
      "This way we don't need to do any maths to get it to fit the way we want it to, SVG handles it for us."
    ],
    "bullets": ["no maths"]
  },
  "385": {
    "steps": 2,
    "script": [
      "Use tags also make it really easy for us to pattern match logos",
      "as long as we draw the <use> tag so that it's centre is at the point defined in our layplan, the rest comes free."
    ],
    "bullets": ["use easy for pattern match", "just draw to center"]
  },
  "386": {
    "steps": 2,
    "script": [
      "This is just one example of something cool that we’ve accomplished with SVG.\n\nA lot of people I’ve spoken to have only considered it for icons, or basic shape drawing but there’s actually loads of cool stuff it can do. \n\nI’ve used it for tiny UI details like this animated tick box,",
      "but I’ve also used it to prepare this talk - all these slides are SVGs and I’ve found it far easier to get across SVG concepts using actual SVGs than trying to use something like keynote."
    ]
  },
  "387": {
    "steps": 0,
    "script": [
      "It’s not even limited to just vector graphics, using SVG filters you can apply all kinds of cool effects to any kind of content - I don’t know if you all saw this codepen by Kyle Wetton floating around this week, but it’s a great example of how SVG can be combined with CSS to produce a really powerful output"
    ]
  },
  "388": {
    "steps": 4,
    "script": [
      "There are so many great resources online that I found helpful when trying to solve some of these problems.  ",
      "There’s a great talk by Sarah Drasner from a couple of years ago called ‘SVG can do that?’ where she basically lists loads of amazing things that you would never think you could achieve with SVG.",
      "The MDN docs are really well written and have some great examples.",
      " I struggled to get my head around things like viewBox and preserveAspectRatio until I read this article by Sara Souiedan.  I found her examples really helped me understand, and now we rely on those concepts for a lot of our logo work."
    ]
  },
  "389": {
    "steps": 4,
    "script": [
      "So how are we saving the planet?  Well traditionally making clothes is hard and expensive.,",
      "The expense involved means you need to make thousands of an item to make it cost-effective.  Manufacturing to maximise return is a guessing game, what if thousands of people don’t want to buy what you’ve produced?",
      "Currently, 15% of all manufactured clothes, $400bn worth per year is left unsold.  Much of it is sent to landfill or burnt.",
      "And the public are starting to take notice."
    ]
  },
  "391": {
    "steps": 3,
    "script": [
      "Using manufacturing on-demand, there’s no longer any need to make thousands of items up front.  The fact SVGs are immediately printable means the set up time and cost, that you have to pay for every variation of your product, is drastically reduced.",
      "After putting in the work to get your garment set up the first time,",
      "you can create any number of styles without any extra effort or costs.  We don’t need to make thousands of garments that won’t be sold, we can even make items quickly AFTER they've been ordered.  There’s no need for waste."
    ]
  },
  "430": {
    "steps": 0,
    "script": [
      "One of the reasons I was drawn to this job at was because I thought it was cool that we were writing code but producing physical items. \n\nSince then I’ve learned a lot about how polluting and wasteful the fashion and textile industries can be, and we’ve all learned a lot more about the impending climate crisis.  \n\nIt’s changed my personal values and now I’m really proud of the fact that we’re trying to make a difference. \n\nIt’s all our responsibility to leave this planet in a better state, and I believe that as developers, some of the power lies in our hands to push industries to be better.  \n\nI know that sounds a bit lofty and idealistic but, as you’ve just seen, you can literally use SVG to help try and save the planet, a little bit at a time.  I’m sure there are loads of other ways SVGs can be used for good, if you’ve got any ideas please do come and find me later, I’d love to chat them over with you.  Thank you very much for listening."
    ]
  }
}
