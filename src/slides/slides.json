{
  "10": {
    "steps": 0,
    "script": [
      "Hi I’m Chris and I work at Unmade where we’re working with big brands in the Fashion industry to enable them to produce one-off and short-run garments using the same machinery and, at roughly the same unit cost, as all their mass produced stuff."
    ]
  },
  "12": {
    "steps": 0,
    "script": [
      "Initially what this meant was that you as a customer could go to the website of one of our partner brands, design, say, a jumper, to look exactly how you want it, then we can convert the design from your browser into a program that runs on an industrial knitting machine and get your jumper knitted.  Which is pretty cool, right?  I mean who doesn’t want a custom cosy merino jumper or scarf?",
      "I’ll tell you who - people in summer.  It turns out that when the sun’s out, knitwear sales tank and unfortunately quite a few of the brands we were in discussion with were keen on selling stuff all 12 months of the year."
    ]
  },
  "13": {
    "steps": 0,
    "script": [
      "One of these brands, who actually didn’t want any knitwear at all from us, was Rapha.  They liked the look of our system and wanted to use it for their custom offering, to let cycle clubs design their own Rapha kit that would be sublimation printed, rather than knitted."
    ]
  },
  "14": {
    "steps": 0,
    "script": [
      "They already had a system in place, but it was fairly low-tech and quite involved.  They’d often have to translate hand-drawn sketches to fully fledged designs, and would have quite a bit of back and forth with the customer until they were happy.",
      "Then they would send their design to a draftsman working in their factory, who would again adapt that into a pattern template called a lay plan.  Once the lay plan is finished, it can be printed and assembled and a sample sent out to the customer, but then that’s the first time the customer’s seen their idea in real life so they’ll probably want to make more changes to it and it takes ages."
    ]
  },
  "15": {
    "steps": 0,
    "script": [
      "Our platform automates most of the process.  We can take that lay plan template, combine it with some photos of a template product and put it straight into the users browser, providing them with a UI to decide exactly how it should look.  Every change the user makes is immediately reflected on the lay plan and the visualisation, so the user can see what they’re designing and there’s no need for rounds of feedback or samples.  Plus the fact we’re working from a template and we’ve got such a great UI means you don’t need to be a garment designer to produce this design, you just need to have some semblance of taste."
    ],
    "bullets": [
      "We move the responsibility onto the customer\n\nno back and forth\n\nno samples"
    ]
  },
  "16": {
    "steps": 0,
    "script": [
      "This is an example of the a lay plan generated by our system.  It’s just one big SVG.  Today I’m going to talk to you about some of the challenges we faced whilst building the system to create these files, and some of the features of SVG that we discovered which made them easier to deal with.",
      "I’m also going to explain how the tech we’re building is really saving the planet - but just to keep your interest piqued, I’m gonna save that til the end.  What I will say is that without the sustainability angle, if I’d stuck with the working title of this talk I don’t think it would have been picked up."
    ]
  },
  "17": {
    "steps": 0,
    "script": [
      "Understanding the trigonometry of rotating vectors when arbitrary rotational values are applied",
      "Are many of you big  SVG users?  So you’ll probably know a lot of this stuff already, but my hope is that you’ll come away from this talk with some new SVG tricks up your sleeve and some inspiration for how you can help make a positive difference with your code."
    ],
    "bullets": ["read it"]
  },
  "20": {
    "steps": 0,
    "script": [
      "Well, for our knit products we had built an engine that uses HTML Canvas to represent the user’s design.  We were able to do that because the design options, the things we needed to actually draw, were pretty simple, and if you consider each knit stitch as a single pixel, jumpers are pretty low-resolution.",
      "Rapha’s kit isn’t knitted, it’s printed, and printed graphics need to be much higher resolution - which also gives you the freedom to produce some far more complicated designs.  We knew that it would be sensible to work with vector rather than raster graphics, and vector on the web pointed us to SVG."
    ],
    "bullets": ["what are SVGs, why we chose them"]
  },
  "21": {
    "steps": 0,
    "script": [
      "SVG stands for scalable vector graphics.",
      "I’m not really sure the S is necessary, aren’t vector graphics, by definition, scalable?",
      "Anyway vectors are great for us, it means we can produce very high resolution print files but also keep a small file size and render in a browser without taking up all your device memory.",
      "It’s also suitable for us as SVG support is baked into many software packages that are already widely used.  The team in Rapha’s factory were already using Corel Draw and Illustrator, which both export to SVG, so they didn’t need any extra training.",
      "SVG is also widely supported by browsers, and you can add, change and remove parts of an SVG using Javascript without any additional libraries.",
      "SVG also supports both CMYK and RGB colour spaces.  This means we can show RGB colours on screen, but swap them out for CMYK before printing - and as long as we use accurate colour data, the real, finished garment looks the same as the one designed in the browser."
    ],
    "bullets": ["on screen, mention slides"]
  },
  "22": {
    "steps": 0,
    "script": [
      "Well, not everything about SVGs is great, like trying to centre align text for example, and as I mentioned earlier there were some features that we found to be a bit of a challenge.  The biggest of these were applying patterns and logos to your garment.  Which is basically the whole system, so let’s talk about those. "
    ]
  },
  "50": {
    "steps": 0,
    "script": [
      "Users want to be able to apply a pattern to the background of all or part of the garment.  Oh and they also want to be able to rotate it, or change the scale of it."
    ],
    "bullets": ["patterns - appplied wherever and transformed"]
  },
  "70": {
    "steps": 5,
    "script": [
      "SVG has a built-in <pattern> element - this seemed like a good starting place.",
      "SVG patterns let you draw a single tile, of any size you like, containing any other SVG elements.",
      "When you apply the pattern, the tile is repeated infinitely, much like with CSS image backgrounds.",
      "I liked this because I'm really familiar with CSS backgrounds thanks to the days of",
      "pain-stakingly restyling my myspace page. BUT there’s a crucial difference between SVG patterns and CSS backgrounds"
    ],
    "bullets": [
      "pattern element seems obvious",
      "requires you to draw stuff into a tile",
      "repeated infinitely like css",
      "i like this",
      "cos of myspace days \n\n but SVG patterns are different"
    ]
  },
  "80": {
    "steps": 2,
    "script": [
      "When you apply a background to an element with CSS, by default the background is anchored to the top left of that element.",
      "When you change the element’s position, the background moves with it."
    ],
    "bullets": [
      "CSS anchors the pattern to the element",
      "bg moves with the element"
    ]
  },
  "90": {
    "steps": 2,
    "script": [
      "When you define a pattern in SVG, it's anchored to the top left of the DOCUMENT. It's repeated, hidden, across the entire document and revealed only within any elements that you apply it to, like a little window.",
      "When you move the element, the background stays fixed. This is not ideal for our use case for a couple of reasons."
    ],
    "bullets": [
      "svg anchors the pattern to the document, repeated hidden",
      "moving it keeps the bg fixed - no good for us because:"
    ]
  },
  "100": {
    "steps": 3,
    "script": [
      "Firstly, not all the panels on our layplan are oriented the same way. They're arranged and rotated to save material.\n\nA pattern anchored to the document would not look right when applied to a rotated panel. As you can see here, the sleeves have been rotated on the layplan and",
      "as a result, your Newcastle United replica cycling kit",
      "now has sleeves from a cartoon prisoner haloween costume."
    ],
    "bullets": ["panels arranged and rotated"]
  },
  "110": {
    "steps": 0,
    "script": [
      "Secondly - in fashion, much like when you're hanging wallpaper, there is this concept of pattern matching.\n\nSome of our panels are attached in such a way that we want the patterns to flow virtually seamlessly across the literal seams.\n\nWe need to be able to define a point on each panel that the pattern should be anchored to, and translated around, rather than using the top left of the document as the anchoring point.\n\nSo we need to somehow apply a transform to our pattern. I wonder if anyone’s thought of that before?  Let’s have a look…"
    ],
    "bullets": [
      "pattern matching - pattern must be seamless. \n\nneed to transform, so we turn to"
    ]
  },
  "120": {
    "steps": 0,
    "script": [
      "Turns out you can do that with the patternTransfrom attribute, yay!"
    ],
    "bullets": ["google provides patternTransform: intro that"]
  },
  "130": {
    "steps": 0,
    "script": [
      "But wait, no, patternTransform applies a transform to the pattern element, so it’s transformed the same on every element to which  you’ve applied the pattern.  We wanted to transform the pattern only in specific applications - we need different transformations for different panels."
    ],
    "bullets": ["but we need per-panel transforms"]
  },
  "140": {
    "steps": 2,
    "script": [
      "So we had a crack at duplicating the patterns, one per panel, and applying transformations like that.\n\nBut this was very repetitive.  I’ve truncated the worst of it here, but if we expanded these dots you’d see the exact same set of elements repeated so many times it would make you physically sick.\n\nEven though I’m willing to stand up here and tell you that I wrote this code, I was not about to publish  it for a code review and permanently soil my GitHub profile.",
      "It was not sustainable.  There had to be a better way"
    ],
    "bullets": [
      "so we tried duplicating, but it got hectic",
      "not sustainable, looked elsewhere"
    ]
  },
  "150": {
    "steps": 2,
    "script": [
      "We stumbled across the fact that when you move an SVG element by applying a transform, rather than changing it's x and y attributes",
      "it retains the fill from its original position. \n\n Does anyone else feel like stumbling across stuff has played a huge part in getting you to this stage of your career?  Or is that just me?"
    ],
    "bullets": [
      "applying transform not x/y",
      "retains the fill from original pos"
    ]
  },
  "190": {
    "steps": 4,
    "script": [
      "SVG's co-ordinate system allows you to draw stuff that's outside of the visible area or viewbox.  In this example only the bottom right quarter would be within the viewbox, but I'm showing more for illustrative purposes.  So we figured we could",
      "draw some simple rectangles big enough to cover our panels, but centred at the document origin - meaning when we apply our pattern it’s anchored to the centre of the rectangle.",
      "Then we move them into place with a transformation, keeping the pattern locked at the centre",
      "And finally hide anything outside our panel using a clipping path"
    ],
    "bullets": [
      "so we",
      "draw rects centered at origin, anchoring pattern",
      "transform into place, keeping locked",
      "hide with cliping path"
    ]
  },
  "210": {
    "steps": 7,
    "script": [
      "This is cool, until the user starts to add their own transformation, at which point our rectangle is no longer the right size, and we're left with blank areas inside our panel.",
      "Dealing with this took a bit of number crunching.  I thought back to GCSE trigonometry and remembered thinking \"I'll never need this in real life\" (Damn). So I relearned enough to determine how to scale each rectangle to cover the panel when rotation is applied.",
      "We built this as a prototype to present to the wider company.  I was proposing a pretty big change in how we apply patterns, and I feel much more confident in making big changes if I've got everyone else on board before hand.  That way we all share the blame if it doesn't work. \n\n But this does work, so after this presentation, I was feeling pretty smug until",
      "Martin, one of our product managers asked if:  instead of using scaling rectangles, couldn't we just use circles?",
      "SVG Circles were a revelation.",
      "And made handling user transformations far easier",
      "Seeking feedback had provided us with a much simpler solution.  Hacking away at this problem in isolation had narrowed my focus down this one path.  Sharing the problem with the fresh eyes and minds of other team members resulted in a completely different approach."
    ],
    "bullets": [
      "cool until user transformations",
      "this needed some maths, GCSE forgot, relearned",
      "built prototype, presented for feedback",
      "got feedback",
      "why I love circles",
      "circles are great",
      "cross functional feedback, fresh eyes"
    ]
  },
  "250": {
    "steps": 3,
    "script": [
      "With rectangles, your shape's origin is the top left.  If you want the centre point, which we do,",
      "you need to calculate that.",
      "With circles, the centre of the shape is the origin, and you define it when writing the code. We were doing all this maths to translate and scale our rectangles but with circles we never need to transform. We were able to massively simplify the process and therefore the code. \n\n  This was when I realised the SVG circle element was my new favourite circular thing."
    ],
    "bullets": [
      "rectangles origin top, calculate center",
      "circle origin centre, coded, massively simplify code and process"
    ]
  },
  "260": {
    "steps": 6,
    "script": [
      "So our final process for applying patterns is:",
      "Draw a circle for each panel at 0, 0, sized to cover the entirity of the panel",
      "transform them into place, keeping the pattern locked to the centre",
      "apply the clip path",
      "then any user transforms can be applied directly to the circle - no trigonometry required.  Young Chris is vindicated.  On the maths thing at least.",
      "Not on some of the other questionable decisions I made in my youth"
    ],
    "bullets": [
      "so now we",
      "draw circle big enough",
      "transform",
      "clip path",
      "transform the circle, no trig"
    ]
  },
  "310": {
    "steps": 0,
    "script": [
      "So, next problem.  Demanding customers are insisting they want to be able upload logos to show on their kit."
    ],
    "bullets": ["next prob - logos, explain"]
  },
  "320": {
    "steps": 4,
    "script": [
      "Again, these placements can be rotated and, even more so with logos,",
      "pattern matching is crucial.  Getting it wrong could",
      "be",
      "embarrassing"
    ],
    "bullets": [
      "also user transformable",
      "pattern matching critical",
      "wrong",
      "bad"
    ]
  },
  "340": {
    "steps": 5,
    "script": [
      "Intially I thought : well we've solved all this already so lets just use <pattern> elements but manipulate them so that they're big enough to never repeat.",
      "But when we started applying user transforms,",
      "this didn't work and I realised",
      "this was madness.  The whole point of patterns is that they repeat.",
      "Trying to shoehorn a solution to a completely separate problem was not the answer."
    ],
    "bullets": [
      "already solved, right?",
      "but user transforms",
      "no",
      "not gonna work",
      "dont shoehorn"
    ]
  },
  "350": {
    "steps": 0,
    "script": [
      "We took a step back and came up with a solution using the <use> tag."
    ],
    "bullets": ["on screen"]
  },
  "360": {
    "steps": 3,
    "script": [
      "If you’ve done much work with SVG Icons you may be familiar with the <use> tag; it allows you to clone an element from one place in your document to another.",
      "And importantly you can change the width and height, and apply transformations to cloned elements, so each clone can be sized and positioned differently to the original element.",
      "Our solution involved us inserting a use tag for each possible position a logo can be added.  These use tags are positioned, sized and rotated to cover that placement, but don’t have an href attribute, so don’t render anything.\n\nThen when a user uploads their logo SVG, we copy the entire file to a hidden part of our document and update the href of the relevant use tag to point to the uploaded file, cloning the logo into place."
    ],
    "bullets": ["intro use", "supports transforms"]
  },
  "361": {
    "steps": 3,
    "script": [
      "This lets us use another smart feature of SVG - that you can nest SVGs inside SVGs",
      "Nested SVGs retain their own co-ordinate system, so elements all render in the correct positions - much like embedding an image, but because we've embedded the whole file",
      "We have the ability to change any attributes on the uploaded file."
    ]
  },
  "370": {
    "steps": 0,
    "script": [
      "Because nested SVGs have their own coordinate system, we're able to make an uploaded logo fit perfectly into any of our placements, regardless of what size it was drawn, by manipulating just three attributes on the nested SVG. \n\n Coordinate systems can be set with with a viewBox attribute or interpreted from the width and height, so if an uploaded logo has no viewbox we create one from it's width and height, and set the width and height to 100%. This tells the SVG to fill whatever box it's put inside - in this case that'll be the width and height we set on our use tag."
    ],
    "bullets": ["on screen"]
  },
  "380": {
    "steps": 0,
    "script": [
      "This way we don't need to do any maths to get it to fit the way we want it to, SVG handles it for us."
    ],
    "bullets": ["no maths"]
  },
  "385": {
    "steps": 2,
    "script": [
      "Use tags also make it really easy for us to pattern match logos",
      "as long as we draw the <use> tag so that it's centre is at the point defined in our layplan, where the two panels meet, the rest comes free."
    ],
    "bullets": ["use easy for pattern match", "just draw to center"]
  },
  "386": {
    "steps": 2,
    "script": [
      "This is just one example of something cool that we’ve accomplished with SVG.\n\nA lot of people I’ve spoken to have only considered it for icons, or basic shape drawing but there’s actually loads of cool stuff it can do. \n\nI’ve used it for tiny UI details like this animated tick box,",
      "but I’ve also used it to prepare this talk - all these slides are SVGs and I’ve found it far easier to get across SVG concepts using actual SVGs than trying to use something like keynote."
    ]
  },
  "387": {
    "steps": 0,
    "script": [
      "It’s not even limited to just vector graphics, using SVG filters you can apply all kinds of cool effects to any kind of content - I don’t know if you all saw this codepen by Kyle Wetton floating around this week, but it’s a great example of how SVG can be combined with CSS to produce a really powerful output"
    ]
  },
  "388": {
    "steps": 4,
    "script": [
      "There are so many great resources online that I found helpful when trying to solve some of these problems.  ",
      "There’s a great talk by Sarah Drasner from a couple of years ago called ‘SVG can do that?’ where she basically lists loads of amazing things that you would never think you could achieve with SVG.",
      "The MDN docs are really well written and have some great examples.",
      " I struggled to get my head around things like viewBox and preserveAspectRatio until I read this article by Sara Souiedan.  I found her examples really helped me understand, and now we rely on those concepts for a lot of our logo work."
    ]
  },
  "389": {
    "steps": 4,
    "script": [
      "So how are we saving the planet?  Well traditionally making clothes is hard and expensive.,",
      "The expense involved means you need to make thousands of an item to make it cost-effective.  Manufacturing to maximise return is a guessing game, what if thousands of people don’t want to buy what you’ve produced?",
      "Currently, 15% of all manufactured clothes, $400bn worth per year is left unsold.  Much of it is sent to landfill or burnt.",
      "And the public are starting to take notice."
    ]
  },
  "391": {
    "steps": 3,
    "script": [
      "Using manufacturing on-demand, there’s no longer any need to make thousands of items up front.  The fact SVGs are immediately printable means the set up time and cost, that you have to pay for every variation of your product, is drastically reduced.",
      "After putting in the work to get your garment set up the first time,",
      "you can create any number of styles without any extra effort or costs.  We don’t need to make thousands of garments that won’t be sold, we can even make items quickly AFTER they've been ordered.  There’s no need for waste."
    ]
  },
  "430": {
    "steps": 0,
    "script": [
      "One of the reasons I was drawn to this job at was because I thought it was cool that we were writing code but producing physical items. \n\nSince then I’ve learned a lot about how polluting and wasteful the fashion and textile industries can be, and we’ve all learned a lot more about the impending climate crisis.  \n\nIt’s changed my personal values and now I’m really proud of the fact that we’re trying to make a difference. \n\nIt’s all our responsibility to leave this planet in a better state, and I believe that as developers, some of the power lies in our hands to push industries to be better.  \n\nI know that sounds a bit lofty and idealistic but, as you’ve just seen, you can literally use SVG to help try and save the planet, a little bit at a time.  I’m sure there are loads of other ways SVGs can be used for good, if you’ve got any ideas please do come and find me later, I’d love to chat them over with you.  Thank you very much for listening."
    ]
  }
}
