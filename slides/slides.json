{
  "10": {
    "steps": 0,
    "script": ["Hi, I'm Chris, a senior front-end engineer at Unmade."]
  },
  "12": {
    "steps": 0,
    "script": [
      "At Unmade, we help fashion brands produce customised garments using the same manufacturing processes as their mass-produced ranges. I've been there for around three years.  When I started, we were focussed entirely on knitwear and developing the software required to automate industrial knitting machines."
    ]
  },
  "13": {
    "steps": 0,
    "script": [
      "A couple of years ago we were approached by Rapha, the cyclewear brand, who wanted to leverage our technology to build a customisation platform to allow cycling clubs to design and purchase custom kit manufactured to the same high standard as all Rapha's other offerings."
    ]
  },
  "14": {
    "steps": 0,
    "script": [
      "This is an example of the kind of output file that we generate.  This is what we call a layplan, it's a print-ready file containing all the user's customisation choices applied to a template. When this is printed, it can be cut out, joined together and shipped out to the customer.",
      "I'd like to talk to you about some of the interesting challenges we've faced during this project and some of the features of SVG that we've been able to take advantage of in order to overcome these challenges",
      "Some of this may be features you're already familiar with, some of it maybe not, but hopefully you'll come away with some new ideas about how you can bend SVGs to do more than you may have thought before."
    ]
  },
  "15": {
    "steps": 0,
    "script": [
      "In this talk I'm going to cover four main areas: How we chose SVG as our technical solution, Patterns and Logos, and how we apply them to our custom garments and Sustainability, how we are able to use this technology to reduce the environmental impact of the fashion industry.  And how I think I can get away with such a clickbaity talk title instead of using my working title."
    ]
  },
  "16": {
    "steps": 0
  },
  "20": {
    "steps": 0,
    "script": [
      "SVG stands for Scalable Vector Graphics, it's an open format that allows you to draw pretty complicated images as code.",
      "We determined that SVG was the ideal format for this project because:"
    ]
  },
  "21": {
    "steps": 0,
    "script": [
      "SVG is vector based, it's what the V stands for.  This means that our output file can be printed in super high-resolution but keep a small filesize, small enough to run on devices without loads of memory to spare.",
      "SVG support is baked in to existing software like Illustrator and Corel Draw.  The blank layplans we take as an input can therefore be drawn by the draftsmen in the factory - the experts in this field, without any additional training on how to write SVG code",
      "SVG is very widely supported by browsers, and methods to manipulate SVG, changing attributes or creating and removing elements are readily available to javascript without any additional libraries.",
      "SVG supports CMYK and RGB colour spaces.  Often, when you print something from the internet you'll find that the colours are not the same on paper as they were on screen.  This is because screens create and mix colours using red, green and blue light, as opposed to printers which use cyan, magenta, yellow and black ink.  Generally digital graphics define only how the colours should appear on screen, but with SVG you can also provide the colour information for a printed output.   So we can ensure that the colours on the finished, real-life garment look the same as they did on screen during the designing.",
      "In fact, I've developed such an attachment to SVG that I've written all these slides as SVGs.  I'm a bit obsessed.  Anyway:"
    ]
  },
  "30": {
    "steps": 0,
    "script": [
      "The traditional process for designing a custom team kit involves a fair bit of back and forth between the customer and a designer.",
      "Often this starts with hand-drawn sketches and rounds of customer revisions until eventually the customer is happy.  This is a slow process, I'm sure we all know it's difficult to get an idea out of someone else's head.",
      "From there the design is sent to the factory, where a skilled draftsman will adapt the it into a layplan template, which can then be printed, cut and assembled into a garment. Then there may be one or more samples made, to ensure the customer is happy with the final product, before the full production run is made."
    ]
  },
  "40": {
    "steps": 0,
    "script": [
      "The platform we've developed automates much of this process, and moves a lot of the responsibility onto the customer.",
      "We take a blank layplan as an input, apply various choices made by the user and output a file that's ready to print.",
      "There's no need for rounds of feedback, as the customer is able to see on screen a realistic render of the product they'll recieve in the post."
    ]
  },
  "41": {
    "steps": 0,
    "script": [
      "There are a couple of details required here that are easy to overlook, but are crucial to ensure our online customisation experience is as good as doing it by hand.  Users can choose from a list of graphic patterns that can be applied to all or part of the garment, "
    ]
  },
  "42": {
    "steps": 0,
    "script": [
      "and the same goes for logos - if you're creating your team kit you want your team logo on it, as well as any sponsors you might have. These two features posed the majority of development challenges we faced."
    ]
  },
  "50": {
    "steps": 0,
    "script": [
      "Part of the customisation process allows the customer to set a pattern as the background to all or part of their garment, and then transform it by scaling and rotating."
    ]
  },
  "70": {
    "steps": 5,
    "script": [
      "SVG has a <pattern> element - this seemed like the obvious solution.",
      "SVG patterns require you to draw a single tile, of any size, containing any other SVG elements you like.",
      "These tiles are then repeated infinitely, much like CSS image backgrounds.",
      "I liked this because I'm really familiar with CSS backgrounds thanks to the days of",
      "pain-stakingly restyling my myspace page. However, what we quickly discovered was that SVG Patterns have a crucial difference to CSS backgrounds."
    ]
  },
  "80": {
    "steps": 2,
    "script": [
      "When you apply a background to an element with CSS, by default the background is anchored to the top left of that element.",
      "When you move it around, the background moves with it."
    ]
  },
  "90": {
    "steps": 2,
    "script": [
      "When you define a pattern in SVG, it's anchored to the top left of the DOCUMENT.  It's repeated, hidden, across the entire document and revealed only within any elements that you apply it to.",
      "When you move the element, the background stays fixed.  This is not ideal for our use case for a couple of reasons."
    ]
  },
  "100": {
    "steps": 0,
    "script": [
      "Firstly, not all the panels on our layplan are oriented the same way.  They're arranged and rotated to save material - we're trying to save the world here and waste does not help.",
      "A pattern anchored to the document would not look right when applied to a rotated panel.  As you can see here, the sleeves have been rotated on the layplan and as a result the stripes are going the wrong way."
    ]
  },
  "110": {
    "steps": 0,
    "script": [
      "Secondly - in fashion and wallpapering there is this concept of pattern matching.",
      "Some of our panels are attached in such a way that we want the patterns to flow seamlessly across the, er, seams.",
      "We need to be able to define where on each panel the pattern should be anchored to, and translated around.",
      "We even have markers in our blank layplans that show us where the centre of a panel should be and how it's rotated on the document.",
      "So we need to somehow be able to transform our pattern element.  We turned to the developers best friend"
    ]
  },
  "120": {
    "steps": 0,
    "script": [
      "And Google provides - the patternTransform attribute, which allows you to define any set of transformations to apply to your pattern"
    ]
  },
  "130": {
    "steps": 0,
    "script": [
      "BUT.  We didn't want to apply the transform to the pattern element.  We want to be able to transform the pattern as it's applied to the panel, we need different transformations per-panel."
    ]
  },
  "140": {
    "steps": 2,
    "script": [
      "So we had a crack at duplicating the patterns, one per panel, and applying transformations like that.\n\nBut then when the user starts to scale or rotate that pattern, we had to run some more calculations to determine the new transform value and it started to get a bit out of hand. The code became hard to read, and harder to maintain",
      "It was not sustainable code, so we decided to look for a simpler path."
    ]
  },
  "150": {
    "steps": 2,
    "script": [
      "We stumbled across the fact that when you move an SVG element by applying a transform, rather than changing it's x and y position, it retains the fill from its original position.",
      "As far as I'm concerned, stumbling is a very underrated developer skill."
    ]
  },
  "190": {
    "steps": 4,
    "script": [
      "So we figured we could",
      "draw some simple rectangles big enough to cover our panels, but centred at the document origin - anchoring the pattern to the centre of the rectangles",
      "Then we move them into place with a transformation, keeping the pattern locked at the centre",
      "And finally hide anything outside our panel using a clipping path"
    ]
  },
  "210": {
    "steps": 7,
    "script": [
      "This is cool, until the user starts to add their own transformation, at which point our rectangle is no longer the right size, and we're left with blank areas inside our panel.",
      "Dealing with this took a bit of number crunching.  I swore at my fifteen year old self for not remembering GCSE trigonometry and relearned enough to determine how to scale each rectangle to cover the panel when rotation is applied.",
      "We built this as a prototype to present to the wider company.  This was a pretty big chunk of (admittedly bad) code that we were intending to replace and I always feel more confident if as many people as I can fit into a meeting room tell me that my idea is not ridiculous. \n\nAfter this presentation, I was feeling pretty smug until",
      " Martin, one of our product managers asked if instead of using scaling rectangles, couldn't we just use circles?",
      "This is when SVG circles bumped doughnuts off the top spot of my list of favourite circles.",
      "Circles made everything so much easier.  I love circles.",
      "Lesson learned: Seek cross-functional feedback early and often.  Team members who didn't have the same background knowledge I had picked up from hacking away at this problem were able to approach it from a different, much simpler angle."
    ]
  },
  "250": {
    "steps": 2,
    "script": [
      "With rectangles, your shape's origin is the top left.  If you want the centre, which we do, you need to calculate that.",
      "With circles, the centre is the origin, and you define it in the elements attributes. We were doing all this maths to scale our rectangles but with circles we never need to scale. We were able to massively simplify the process and therefore the code."
    ]
  },
  "260": {
    "steps": 5,
    "script": [
      "So our final process for applying patterns is:",
      "Draw a circle for each panel at 0, 0, sized to cover the entirity of the panel",
      "transform them into place",
      "apply the clip path",
      "then any user transforms can be applied directly to the circle - no trigonometry required.  15 year old Chris is vindicated"
    ]
  },
  "310": {
    "steps": 0,
    "script": [
      "Next problem - as well as patterns, customers can upload and apply logos to specific placements defined in the layplan."
    ]
  },
  "320": {
    "steps": 4,
    "script": [
      "Again, these placements can be rotated and, even more so with logos, pattern matching is crucial.  Getting it wrong",
      "could",
      "be",
      "embarrassing"
    ]
  },
  "340": {
    "steps": 5,
    "script": [
      "Intially I thought well we've solved all this already so lets just use <pattern> elements but manipulate them so that they're big enough to never repeat.",
      "But when we started applying user transforms,",
      "this didn't work and I realised",
      "this was madness.  The whole point of patterns is that they repeat.",
      "Trying to shoehorn a solution to a completely separate problem was not the answer."
    ]
  },
  "350": {
    "steps": 0,
    "script": [
      "We took a step back and came up with a solution using the <use> element."
    ]
  },
  "360": {
    "steps": 2,
    "script": [
      "SVGs <use> element allows you to clone an element from one place in your document to another.",
      "And importantly you can apply transformations to <use> tags, so each clone can be sized and positioned differently to the original element. This allows us to import a logo SVG whole to a hidden part of our document, and clone it into it in as many different placements as the user wants."
    ]
  },
  "370": {
    "steps": 0,
    "script": [
      "Regardless of the size at which the logo was drawn, we're able to make it fit perfectly into any of our placements by manipulating just three attributes on the SVG. We set the width and height to 100% - this tells the SVG to fill whatever box it's put inside - in this case it width and height we set on our use element. We set the original width and height to the viewbox attribute, and this ensures that whatever size we try to draw it at, it will retain it's original aspect ratio"
    ]
  },
  "380": {
    "steps": 0,
    "script": [
      "So we don't need to do any maths to get it to fit the way we want it to, SVG handles it for us."
    ]
  },
  "385": {
    "steps": 2,
    "script": [
      "Use elements also make it really easy for us to pattern match logos",
      "as long as we draw the <use> element so that it's centre is at the point defined in our layplan, and the rest comes free."
    ]
  },
  "390": {
    "steps": 2,
    "script": [
      "",
      "So, I've talked about how we chose SVG and how we overcame some of the biggest hurdles using <pattern> and <use> elements.  But how does this have anything to do with sustainability or saving the planet?"
    ]
  },
  "400": {
    "steps": 0,
    "script": [
      "Well, SVG files are small - our layplan SVGs average at around 300kb, an equivalent JPG comes out at around 1.2mb.",
      "Transferring and storing data uses electricity.  By sticking to smaller files we're reducing our CO2 output by about 3g per design. That's the equivalent of driving a car 12 metres.  "
    ]
  },
  "410": {
    "steps": 2,
    "script": [
      "With 15,000 saved designs, we've saved the equivalent of one person driving from Guildford to Leicester.",
      "  So if anyone here is driving to Leicester tonight, thanks to us at Unmade your conscience is clear. \n\n Oh but also"
    ]
  },
  "420": {
    "steps": 4,
    "script": [
      "Traditionally, the process from designing a garment to getting it produced is hard and expensive.  Most of that cost doesn't come from the manufacturing or the materials but from the setup.  So once you've set the machines up, it makes economical sense to make a thousand items rather than a handful.",
      "Making a thousand items takes time, which means longer wait times to get your next stuff made, which in turn leads to waste. Current production is based on designers predicting what you'll want to wear 12 months in advance, because that's how long it takes to get stuff made. These predictions are always wrong.",
      "15% of everything that gets made is left unsold, a huge amount of that is destroyed.",
      "that's $400bn worth of stuff [PAUSE].  To put that into perspective. that's approximately 51 dollars for every single person on the planet.  400 billion dollars worth of manufactured items, wasted.  This is a huge number, and the environmental impact of this is disasterous."
    ]
  },
  "425": {
    "steps": 2,
    "script": [
      "Unmade's platform automates away the expensive parts of manufacturing, all but eliminating this waste \n\n If we approached brands with an offer to replace their entire supply chain with on-demand manufacturing we'd be turned away at the door \n\n but under the guise of customisation, we've snuck in the back door and implemented on-demand manufacturing with our partners and their factories. \n\nSo cycling teams can get their custom team kit, but Rapha designers can also now get a new design to market in a matter of weeks, not a year.",
      "In fact, on Tuesday Rapha released the first in a new range of artist collaborations; short-run kits designed using our system.  Currently in their Soho store you can pick up a kit designed in collaboration with architect and artist Nigel Peake. \n\n And if it's popular enough that a short-run does sell out, they can quickly produce a second run, or even release a second design without having to pay any more setup costs.\n\nThere's no longer need for them to hold massive stock or guess what people will want a year from now.\n\nReducing manufacturing by 15% is reducing the pollution created by manufacturing by 15% and that's"
    ]
  },
  "430": {
    "steps": 3,
    "script": [
      "how we're doing our bit",
      "to save the planet.",
      "Thank you for your time.  I'll tweet out a link to these slides later if anyones interested to see them again or see if I was lying about them being SVGs.  Does anyone have any questions they'd like to ask?\n\nHiring"
    ]
  }
}
